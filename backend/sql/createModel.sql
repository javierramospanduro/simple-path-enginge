/*
	ENGINE PATH DATABASE V1
*/
DROP SCHEMA IF EXISTS PARAM CASCADE;
DROP SCHEMA IF EXISTS USERS CASCADE;
DROP SCHEMA IF EXISTS OPERATION CASCADE;

/*
	CREATE USERS
*/
/*
REASSIGN OWNED BY xengrobadm TO postgres;
REASSIGN OWNED BY xengrobgestor TO postgres;
REASSIGN OWNED BY xengrobusu TO postgres;

DROP ROLE IF EXISTS xengrobadm;
DROP ROLE IF EXISTS xengrobgestor;
DROP ROLE IF EXISTS xengrobusu; 

CREATE ROLE xengrobadm WITH
  LOGIN
  NOSUPERUSER
  INHERIT
  NOCREATEDB
  CREATEROLE
  REPLICATION
  ENCRYPTED PASSWORD 'md5326731a054c8f2002f4a7f11b22799dd';

CREATE ROLE xengrobgestor WITH
  LOGIN
  NOSUPERUSER
  INHERIT
  NOCREATEDB
  NOCREATEROLE
  NOREPLICATION
  ENCRYPTED PASSWORD 'md50f650b1c41606638adf8d91fe7b69f28';
  
CREATE ROLE xengrobusu WITH
  LOGIN
  NOSUPERUSER
  INHERIT
  NOCREATEDB
  NOCREATEROLE
  NOREPLICATION;  
*/

CREATE SCHEMA USERS;
CREATE SCHEMA PARAM;
CREATE SCHEMA OPERATION;

GRANT USAGE ON SCHEMA OPERATION TO PUBLIC;
GRANT USAGE ON SCHEMA PARAM TO PUBLIC;
GRANT USAGE ON SCHEMA USERS TO PUBLIC;
/*
	TABLES
*/
CREATE TABLE PARAM.AXIS_TYPES (
	TYPE_ID VARCHAR(8) NOT NULL,
	TYPE_DESC VARCHAR(50) NOT NULL,
	AUDIT_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	AUDIT_USER VARCHAR(26) NOT NULL,
	CONSTRAINT PK_AXIS_TYPE PRIMARY KEY (TYPE_ID)
);

CREATE TABLE PARAM.AXIS (
 	AXIS_ID VARCHAR(8),
	AXIS_DES VARCHAR(20),
	TYPE_ID VARCHAR(8),
	IS_VALID BOOLEAN NOT NULL DEFAULT TRUE,
	AUDIT_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	AUDIT_USER VARCHAR(26) NOT NULL,
	CONSTRAINT PK_AXIS PRIMARY KEY (AXIS_ID),
	CONSTRAINT FK_AXIS_AXIS_TYPES FOREIGN KEY (TYPE_ID) REFERENCES PARAM.AXIS_TYPES(TYPE_ID)	
);

CREATE TABLE PARAM.AXIS_POSSIBLE_VALUES (
	AXIS_ID VARCHAR(8) NOT NULL,
	TYPE_ID VARCHAR(8) NOT NULL,
	VALUE_ID SERIAL,
	IS_VALID BOOLEAN NOT NULL DEFAULT TRUE,
	BOOLEAN_VALUE BOOLEAN,
	NUMERIC_VALUE DECIMAL,
	STRING_VALUE VARCHAR,
	AUDIT_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	AUDIT_USER VARCHAR(26) NOT NULL,
	CONSTRAINT PK_AXIS_POSSIBLE_VALUES PRIMARY KEY (AXIS_ID,VALUE_ID),
	CONSTRAINT FK_AXIS_AXIS_POSSIBLE_VALUES FOREIGN KEY (AXIS_ID) REFERENCES PARAM.AXIS(AXIS_ID)	
);

CREATE TABLE PARAM.OPERATORS (
	OPERATOR_ID VARCHAR(26)  NOT NULL,
	OPERATOR_DES VARCHAR(50) NOT NULL,
	AUDIT_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	AUDIT_USER VARCHAR(26) NOT NULL,
	CONSTRAINT PK_OPERATORS PRIMARY KEY (OPERATOR_ID)
);

CREATE TABLE PARAM.FORMULAS (
	FORMULA_ID SERIAL,
	FORMULA_CODE VARCHAR,
	FORMULA_KEY VARCHAR,
	IS_VALID BOOLEAN DEFAULT TRUE,
	FORMULA VARCHAR NOT NULL,
	AUDIT_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	AUDIT_USER VARCHAR(26) NOT NULL,
	CONSTRAINT PK_FORMULAS PRIMARY KEY (FORMULA_ID)
);

CREATE UNIQUE INDEX UI_PARAM_FORMULAS_CODE ON PARAM.FORMULAS (FORMULA_CODE);
CREATE UNIQUE INDEX UI_PARAM_FORMULAS_KEY ON PARAM.FORMULAS (FORMULA_KEY);

CREATE TABLE PARAM.LITERALS (
	LITERAL_CODE VARCHAR(26) NOT NULL,
	LITERAL_TYPE VARCHAR(26) NOT NULL,
	LITERAL_VALUE VARCHAR(255) NOT NULL,
	AUDIT_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	AUDIT_USER VARCHAR(26) NOT NULL,	
	CONSTRAINT PK_LITERALS PRIMARY KEY (LITERAL_CODE)
);


CREATE TABLE USERS.ROLES (
	ROLE_ID VARCHAR(8) NOT NULL,
	ROLE_DESCRIPTION VARCHAR(30) NOT NULL,
	AUDIT_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	AUDIT_USER VARCHAR(26) NOT NULL,	
	CONSTRAINT PK_ROLES PRIMARY KEY (ROLE_ID)
);

CREATE TABLE USERS.USERS (
	USER_ID VARCHAR(8) NOT NULL,
	ROLE_ID VARCHAR(8) NOT NULL,
	CREATION_DATE DATE NOT NULL DEFAULT CURRENT_DATE,
	EXPIRATION_DATE DATE,
	NAME VARCHAR(255) NOT NULL,
	CONSTRAINT PK_USERS PRIMARY KEY (USER_ID),
	CONSTRAINT FK_USERS_ROLES FOREIGN KEY(ROLE_ID) REFERENCES USERS.ROLES(ROLE_ID)
);


CREATE TABLE OPERATION.OPERATION (
	OPERATION_KEY VARCHAR NOT NULL,
	FORMULA_KEY VARCHAR,
	FORMULA VARCHAR,
	APPLIED_FORMULA VARCHAR,
	OPERATION_RELEVANT_INFO VARCHAR,
	AUDIT_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	AUDIT_USER VARCHAR(26) NOT NULL,
	CONSTRAINT PK_OPERATION PRIMARY KEY (OPERATION_KEY),
	CONSTRAINT FK_OPERATION_FORMULA FOREIGN KEY (FORMULA_KEY) REFERENCES PARAM.FORMULAS (FORMULA_KEY)	
);
/*
	DATA
*/

INSERT INTO PARAM.OPERATORS (OPERATOR_ID,OPERATOR_DES,AUDIT_USER) VALUES ('EQUALS','EXACT VALUE','INITIAL');
INSERT INTO PARAM.OPERATORS (OPERATOR_ID,OPERATOR_DES,AUDIT_USER) VALUES ('GREAT','GREAT THAN','INITIAL');
INSERT INTO PARAM.OPERATORS (OPERATOR_ID,OPERATOR_DES,AUDIT_USER) VALUES ('LESS','LESS THAN','INITIAL');
INSERT INTO PARAM.OPERATORS (OPERATOR_ID,OPERATOR_DES,AUDIT_USER) VALUES ('GREATOREQUAL','GREAT OR EQUAL THAN','INITIAL');
INSERT INTO PARAM.OPERATORS (OPERATOR_ID,OPERATOR_DES,AUDIT_USER) VALUES ('LESSTOREQUAL','LESS OR EQUAL THAN','INITIAL');
INSERT INTO PARAM.OPERATORS (OPERATOR_ID,OPERATOR_DES,AUDIT_USER) VALUES ('BETWEEN','BETWEEN TWO VALUES','INITIAL');

/*
	ASSIGN ROLES ON TABLES
*/

GRANT ALL ON ALL TABLES IN SCHEMA PARAM TO xengrobadm;
GRANT ALL ON ALL TABLES IN SCHEMA USERS TO xengrobadm;
GRANT ALL ON ALL TABLES IN SCHEMA OPERATION TO xengrobadm;

GRANT ALL ON ALL TABLES IN SCHEMA PARAM TO xengrobgestor;
GRANT ALL ON ALL TABLES IN SCHEMA USERS TO xengrobgestor;
GRANT ALL ON ALL TABLES IN SCHEMA OPERATION TO xengrobgestor;

GRANT SELECT ON ALL TABLES IN SCHEMA PARAM TO xengrobusu;
GRANT SELECT ON ALL TABLES IN SCHEMA USERS TO xengrobusu;
GRANT ALL ON ALL TABLES IN SCHEMA OPERATION TO xengrobusu;

